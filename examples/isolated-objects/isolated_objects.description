// An `isolated` object's mutable state is isolated from the rest of the program. The object's
// mutable state is accessible only via the object itself making it an "isolated root".
// Any field in an `isolated` object that is not `final` or is not a subtype of `readonly` or
// `isolated object {}` has to be a `private` field. Such a field can only be accessed within a
// `lock` statement ensuring that there will be no data race when accessing the mutable state of
// an `isolated` object.
// If a `lock` statement in a method accesses such a field, additional rules apply to how values are
// transferred in and out of the `lock` statement, in order to ensure that there are no references
// into the objectâ€™s mutable storage except via `isolated` objects.
// The initial value expressions of the fields also need to ensure the same.
// A function/method call within a `lock` statement that accesses such a field should call a
// function/method that is `isolated`.
